


class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __str__(self):
        return f'({self.x}, {self.y})'

    def __bool__(self):
        return self.x != 0 or self.y != 0

    def __int__(self):
        return int(math.sqrt(self.x ** 2 + self.y ** 2))

    def __float__(self):
        return float(math.sqrt(self.x ** 2 + self.y ** 2))

    def __complex__(self):
        return complex(self.x,self.y)

def hash_function(obj):
    obj = str(obj)
    total1 = 0
    total2 = 0
    for i in range(len(obj)//2):
        if len(obj) % 2 != 0 and i == (len(obj) // 2) - 1:
            total1 += ord(obj[i+1])
        total1 += ord(obj[i]) * ord(obj[(i + 1) * -1])

    for i in range(len(obj)):
        if i % 2 == 0 :
            total2 += ord(obj[i]) * (i+1)
        else:
            total2 -= ord(obj[i]) * (i+1)

    hash = (total1 * total2) % 123456791
    
    return hash

def limited_hash(left, right, hash_function=hash):
    range_size = right - left + 1

    def hash_func(obj):
        obj_hash = hash_function(obj)

        if left <= obj_hash <= right:
            return obj_hash

        offset = (obj_hash - left) % range_size
        return left + offset

    return hash_func




