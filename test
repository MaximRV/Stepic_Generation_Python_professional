



class ForgivingIndexer:
    def __init__(self, sequence):
        self.sequence = sequence

    def __getitem__(self, index):
        return self.sequence[int(index)]
    
    def __len__(self):
        return len(self.sequence)

from contextlib import contextmanager

@contextmanager
def context_manager():
    return 'ContextManager'
    
with context_manager() as manager:
    print(manager)

from contextlib import contextmanager

@contextmanager
def context_manager():
    num = 2077
    yield lambda: num
    num += 1
    
with context_manager() as manager:
    print(manager())
print(manager())

from contextlib import contextmanager

@contextmanager
def context_manager():
    try:
        yield 'ContextManager'
    except IndexError:
        print('Исключение IndexError обработано')
    
with context_manager() as manager:
    print(manager[100])


from contextlib import contextmanager

@contextmanager
def context_manager():
    try:
        yield 'ContextManager'
    except IndexError:
        print('Исключение IndexError обработано')
    
try:
    with context_manager() as manager:
        print(manager + 1)
except TypeError:
    print('Исключение TypeError обработано')
